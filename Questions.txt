Q) Which are legal:

A) class X {
    var x = 99;
  }

B) void doStuff(var x) { }

C) void doStuff() {
    var x;
    x = 100;
  }

D) void doStuff() {
    var x = 100;
  }

E) void doStuff() {
    var x = null;
  }

Q) Which are legal:

A) for (var x = 0; x < 3; x++)
   System.out.println(x);

B) try (var in = new FileReader("");
       var out = new FileWriter("")) {
  }

C) try (FileReader in = new FileReader("")) {
  } catch (var ex) { }

D) void doStuff() {
    var x = new int[]{ 1, 2, 3 };
  }

E) void doStuff() {
    var x = { 1, 2, 3 };
  }

Q) Given:

    String message = """Hello\
    Java 17 World!""";
    System.out.println(message + "XXX");

What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello
   Java 17 World!XXX
D) Hello Java 17 World!XXX
E) Hello Java 17 World!
   XXX

Q) Given:

int x = -1;
System.out.println(x & 5);

What is the result?
A) Compilation fails
B) Exception at runtime
C) -1
D) 0x00000005
E) 5

Q) Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);

B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));

C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));

D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));

E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q) Given:
     public static void funct(int x) {
       x = x + 1;
     }

and:
     public static void main(String[] args) {
       int x = 99;
       funct(x);
       System.out.println(x);
     }

     What is the result?
     A) 99
     B) 100
     C) An error

Q)  given:
  public static void q13A(int[] x) {
    x[0] = x[0] + 1;
  }
and:
  public static void main(String[] args) {
    int x[] = {99};
    q13A(x);
    System.out.println(x[0]);
  }

  What is the result?
  A) 99
  B) 100
  C) An error

Q) Given:
  public static void q14A(Integer x) {
    x = x + 1;
  }

and:
  public static void main(String[] args) {
    Integer x = 99;
    q14A(x);
    System.out.println(x);
  }

  What is the result?
  A) 99
  B) 100
  C) An error

Q)
Given
  class Thing {
    int x = 99;

    static void showIt() {
      int x = 98;
      System.out.println("x is " + x);
    }
  }

What is the effect of:
  Thing.showIt();

  A) Compilation fails
  B) Exception
  C) 99
  D) 98

Q) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }
and:
    Base b = new Sub();
//    b.doOtherStuff(); this would be compilation failure Bases do not have other stuff!
//    ((Sub)b).doOtherStuff(); this would succeed
    ((Runnable) b).run();

  What is the result?
  A) doSubStuff
  B) doOtherStuff
  C) doBaseStuff
  D) Exception at runtime
  E) Compilation failure

Q)
Given:
    Object obj = "Hello";
    boolean answered = false;
    if (obj instanceof String) {
      String str = (String)obj;
      if (str.length() > 3) {
        System.out.println(str);
        answered = true;
      }
    }
    if (!answered) System.out.println("Nope");

    Which replace the if clause to produce the same output?
A)    System.out.println(obj instanceof String str && str.length() > 3 ? str : "Nope");
B)    if (obj instanceof String str when str.length() > 3) System.out.println(str);
      else System.out.println("Nope");
C)    if (obj instanceof String str if str.length() > 3) System.out.println(str);
      else System.out.println("Nope");
D)    System.out.println(obj instanceof String.class str && str.length() > 3 ? str : "Nope");
E)    if (!(obj instanceof String str) || str.length() <= 3) System.out.println("Nope");
      else System.out.println(str);

Q)
Which print true?
  Iterable<String> is = List.of("a", "b", "c");
  Object obj = is;

A) System.out.println(is instanceof List);
B) System.out.println(obj instanceof List l && l.size() > 2);
C) System.out.println(obj instanceof List<String> ls);
D) System.out.println(is instanceof Collection<? extends CharSequence> cs);
OR!) System.out.println(is instanceof Collection<String> cs);
E) System.out.println(is instanceof List<String> ls || ls.size() > 2);

Q) Given:
    String s = "Hello";
    switch (s) {
      case "Hello" ->
          System.out.print("Bonjour "); // line n1
          System.out.print("Guten Tag ");
      default -> System.out.print("Bye");
    }

Which is true?
A) The code prints: Bonjour Guten Tag Bye
B) The code prints: Bonjour Guten Tag
C) If line n1 is removed the code prints: Guten Tag Bye
D) If line n1 is removed the code prints: Guten Tag
E) The code fails to compile

Q) Given
    short s = 8;
    System.out.println(switch (s) { // line n1
      // line n2
      default -> "It's something else"; // line n3
    });

Which are true?
A) Compilation fails at line n1
B) Compilation fails at line n3
C) The code runs and prints It's something else
D) Adding at line n2
   case 2,4,6,8 -> "Even < 10";
   gives the output Even < 10
E) Adding at line n2
   case 2 -> case 4 -> case 6 -> case 8 -> "Even < 10";
   gives the output Even < 10

Q) Given:
    final String s = "Hello";
    var m =
    switch (s) {
      // line n2
      case "Hello" -> "Bonjour";
    };
    System.out.println(m);

Which are true?
A) Compilation succeeds
B) The code throws an exception
C) The code prints Bonjour
D) The code prints Salut if this line is added at line n2
   case String -> "Salut";
E) The code prints Bonjour if this line is added at line n2
   default -> "Unknown";

Q) Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here {
      // handle both exceptions
    }
  }
What can be inserted at "enter code here"
to provide handling of exceptions from both
methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given: class AC implements AutoCloseable {
    private String name;
    public AC(String name) { this.name = name; }
    @Override public void close() { System.out.print("Closing " + name); } }
And:
    var ac0 = new AC("zero");
    try (
        var ac1 = new AC("one");
        var ac2 = new AC("two");
        ac0;
        ) {}
What is the result?
A) Compilation fails
B) Closing zero   Closing two   Closing one
C) Closing zero   Closing one   Closing two
D) Closing two   Closing one   Closing zero
E) Closing one   Closing two   Closing zero

Q)
Given
class AC4 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    throw new SQLException();
  }
}
And:
    try (
        var one = new AC4();
        var two = new AC4();
        ){
      throw new FileNotFoundException();
    }
Which are true?
A) Compilation fails
B) A FileNotFoundException is thrown to the caller
C) An SQLException is thrown to the caller
D) close methods of resources "one" and "two" are called
E) close methods of resources "one" and "two" are not both called

Q) Given:
  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E

and:
    doStuff(1, 2);

What happens if method A is deleted?
A) Method B is invoked
B) Method C is invoked
C) Method D is invoked
D) Method E is invoked
E) Compilation fails

Q) Given:
enum Day {
  MONDAY(1), TUESDAY;
  public Day(int d) {}
  public Day() {}
}
and:
System.out.println(Day.MONDAY);

What is the result?
A) 1
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q) Given
enum Suit { HEARTS, DIAMONDS, CLUBS, SPADES;
  boolean isTrumps() { return this == HEARTS; }
}

Which is/are true?
A) isTrumps is implicitly static
B) isTrumps can be marked final
C) if it's necessary to prevent isTrumps being overridden,
   it should be marked final
D) isTrumps fails to compile
E) none of the above

Q) Given:
class Outer1 {
  class Inner1 {
    private int y = 100;
    // line n1
  }
  private int x = 99;
  // line n2
}

and these method proposals:
void showX() { sop("x is " + x); }
void showY() { sop("y is " + y); }
void showAnotherY(Inner1 another) { sop("y is " + another.y); }
static Inner1 makeOne() { return new Inner1(); }

Which is/are true?
A) showX can be added at line n1
B) showY can be added at line n2
C) showAnotherY can be added at line n2
D) makeOne can be added at line n1
E) makeOne can be added at line n2

Q) Given:
record Customer(String name, int id) {
  // line n1
}
Which are valid at line n1?
A)  Customer(String name, int id) {
      this.name = "Mx. " + name;
    }
B)  Customer {
      this.name = name;
      this.id = id;
    }
C)  Customer {
      if (name == null || name.length() == 0 || id < 1)
        throw new IllegalArgumentException("Bad Customer values");
      name = "Mr/Mrs/Ms " + name;
    }
D)  static {}
E)  {}

Q) Given:
interface Int1 {
  default void doStuff() {
    System.out.println("Int1.doStuff()");
  }
}
class Cl1 implements Int1 {
  void doStuff() {
    System.out.println("Cl1.doStuff");
  }
}

What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
  }

In the Base and Sub classes, which are true in isolation?

A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

Q) Given:
  public void doStuff() {
    int len = 3;
    Predicate<String> ps = new Predicate<String>() {
      @Override
      public boolean test(String s) {
        return s.length() > len; // line n1
      }
    };
    // line n2
  }
Which are true?
A) The code compiles
B) Compilation fails due to a problem at line n1
C) adding the code
   System.out.println("testing lines " + (++len));
   at line n2 is OK

Q) Given:
interface IntA {
  default void doStuff() { System.out.println("IntA.doStuff()"); }
}
interface IntB {
  default void doStuff() { System.out.println("IntB.doStuff()"); }
}
class ClA implements IntA, IntB {}

What is the result of a call:
    new ClA().doStuff();

A) Compilation fails
B) RuntimeException
C) IntA.doStuff()
D) IntB.doStuff()
E) ClA.doStuff()

Q)
class Parent {
  Parent(int x) { y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(y); }
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");    new Child(-1);    out.println(" Goodbye!"); } }
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, P-si: x is 0, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!
